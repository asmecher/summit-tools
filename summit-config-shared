from pprint import pprint
import re
import os

# List of "resolutions": Changes that are applied to locale key msgids to make them unique,
# so that incompatible locale keys that appear differently in multiple branches are preserved.
#
# Each resolution entry looks like this:
#
# [
#  "regular expression to match branch filename",
#  "regular expression to match summit filename",
#  "suffix to append to matching msgids",
#  {"list", "of", "msgids", "to", "match"}
# ]
#
# If the branch filename (e.g. .po or .pot) matches the first regexp, then all listed locale keys
# will have the specified suffix added to them before they are ingested by posummit. The suffix
# will be stripped off them again as they are scattered back to the branches if the summit filename
# matches the second regexp.

stableCodeMap = {
    "ar": "ar_IQ",
    "bs": "bs_BA",
    "ca": "ca_ES",
    "cs": "cs_CZ",
    "da": "da_DK",
    "de": "de_DE",
    "el": "el_GR",
    "en": "en_US",
    "es": "es_ES",
    "eu": "eu_ES",
    "fa": "fa_IR",
    "fi": "fi_FI",
    "fr": "fr_CA",
    "fr": "fr_FR",
    "gd": "gd_GB",
    "he": "he_IL",
    "hi": "hi_IN",
    "hr": "hr_HR",
    "hu": "hu_HU",
    "hy": "hy_AM",
    "id": "id_ID",
    "is": "is_IS",
    "it": "it_IT",
    "ja": "ja_JP",
    "ka": "ka_GE",
    "kk": "kk_KZ",
    "ko": "ko_KR",
    "ckb": "ku_IQ",
    "mk": "mk_MK",
    "mn": "mn_MN",
    "nb": "nb_NO",
    "nl": "nl_NL",
    "pl": "pl_PL",
    "pt": "pt_BR",
    "pt": "pt_PT",
    "ro": "ro_RO",
    "ru": "ru_RU",
    "sk": "sk_SK",
    "sl": "sl_SI",
    "sr@cyrillic": "sr_RS@cyrillic",
    "sr@latin": "sr_RS@latin",
    "sv": "sv_SE",
    "tr": "tr_TR",
    "uk": "uk_UA",
    "ur": "ur_PK",
    "uz@cyrillic": "uz_UZ@cyrillic",
    "uz@latin": "uz_UZ@latin",
    "vi": "vi_VN",
    "zh": "zh_CN",
    "zh_Hant": "zh_TW"
}

resolutions = [
    [
        "(ojs|omp|ops)\/stable-3_3_0\/plugins\/importexport\/native\/locale\/[a-zA-Z_]+\/locale.po[t]?$",
        "summits\/(ojs|omp|ops)\/plugins-importexport-native-locale\/[a-zA-Z_]+\/plugins-importexport-native-locale-locale.po[t]?$",
        "##stable-3_3_0##",
        {
            "plugins.importexport.native.cliUsage",
            "plugins.importexport.native.error.unknownUser",
        }
    ],
    [
        "(ojs|omp|ops)\/stable-3_3_0\/plugins\/paymethod\/manual\/locale\/[a-zA-Z_]+\/emails.po[t]?$",
        "summits\/(ojs|omp|ops)\/plugins-paymethod-manual-locale\/[a-zA-Z_]+\/plugins-paymethod-manual-locale-emails.po[t]?$",
        "##stable-3_3_0##",
        {
            "emails.manualPaymentNotification.body",
        }
    ],
    [
        "(ojs|omp|ops)\/stable-3_3_0\/locale\/[a-zA-Z_]+\/locale.po[t]?$",
        "summits\/(ojs|omp|ops)\/locale\/[a-zA-Z_]+\/locale-locale.po[t]?$",
        "##stable-3_3_0##",
        {
            "installer.installationInstructions",
        }
    ],
    [
        "(ojs|omp|ops)\/stable-3_3_0\/locale\/[a-zA-Z_]+\/emails.po[t]?$",
        "summits\/(ojs|omp|ops)\/locale\/[a-zA-Z_]+\/locale-emails.po[t]?$",
        "##stable-3_3_0##",
        {
            "emails.announcement.body",
            "emails.passwordResetConfirm.body",
            "emails.passwordReset.body",
            "emails.userRegister.body",
            "emails.reviewerRegister.body",
            "emails.lockssExistingArchive.body",
            "emails.lockssNewArchive.body",
            "emails.editorAssign.subject",
            "emails.editorAssign.body",
            "emails.reviewRequest.body",
            "emails.reviewRequestSubsequent.body",
            "emails.reviewCancel.body",
            "emails.reviewReinstate.body",
            "emails.reviewConfirm.body",
            "emails.reviewDecline.body",
            "emails.reviewRemind.body",
            "emails.reviewRemindAuto.body",
            "emails.editorDecisionAccept.body",
            "emails.layoutRequest.body",
            "emails.layoutComplete.body",
            "emails.emailLink.body",
            "emails.subscriptionNotify.body",
            "emails.openAccessNotify.body",
            "emails.subscriptionBeforeExpiry.body",
            "emails.subscriptionAfterExpiry.body",
            "emails.subscriptionAfterExpiryLast.body",
            "emails.subscriptionPurchaseIndl.body",
            "emails.subscriptionPurchaseInstl.body",
            "emails.subscriptionRenewIndl.body",
            "emails.subscriptionRenewInstl.body",
            "emails.citationEditorAuthorQuery.body",
            "emails.revisedVersionNotify.body",
            "emails.statisticsReportNotification.body",
            "emails.announcement.subject",
            "emails.reviewReinstate.subject",
            "emails.editorDecisionAccept.subject",
            "emails.layoutRequest.subject",
        }
    ],
]

#
# Tools to split and join domain names into unique paths
# (to prevent multiple .po files with the same basename from clobbering each other)
#
def split_branch_path (subpath):
    filename = os.path.basename(subpath)      # get PO file name
    domain0 = filename[:filename.rfind(".")]  # strip .po extension
    subdir0 = os.path.dirname(subpath)        # get branch subdirectory

    return os.environ['BASE'].replace('/', '-') + '-' + domain0, subdir0

def join_branch_path (domain, subdir, bylang):
    return os.path.join(subdir, domain.split("-").pop() + ".po");

#
# Filters to avoid clobbering of duplicate keys that appear in several branches with different meanings
# (e.g. email template bodies that contain different variables for each branch)
#
def resolve_dups_from_branch_message (msg, cat):
    for resolution in resolutions:
        if re.search(resolution[0], cat._filename) and msg.msgid in resolution[3]:
            msg.msgid = msg.msgid + resolution[2]

S.hook_on_gather_msg_branch = [
    (resolve_dups_from_branch_message,),
]

def resolve_dups_to_branch (msg, cat):
    for resolution in resolutions:
        if re.search(resolution[1], cat._filename) and msg.msgid.endswith(resolution[2]) and (msg.msgid[0:-len(resolution[2])]) in resolution[3]:
            msg.msgid = msg.msgid[0:-len(resolution[2])]

S.hook_on_scatter_msg = [
    (resolve_dups_to_branch,),
]

#
# Summit configuration
#
S.over_templates = True

S.summit = dict(
    topdir=S.relpath("summits/%s/%s/%s" % (os.environ['REPO'], os.environ['BASE'].replace('/', '-'), S.lang)),
    topdir_templates=S.relpath("summits/%s/%s/templates" % (os.environ['REPO'], os.environ['BASE'].replace('/', '-')))
)

#
# Branch configuration
#
S.branches = [
    dict(id="stable-3_3_0",
        topdir=S.relpath("../%s/stable-3_3_0/%s/%s" % (os.environ['REPO'], os.environ['BASE'], stableCodeMap.get(S.lang))),
        topdir_templates=S.relpath("../%s/stable-3_3_0/%s/templates" % (os.environ['REPO'], os.environ['BASE'])),
        transform_path=(split_branch_path, join_branch_path)
    ),
    dict(id="main",
        topdir=S.relpath("../%s/main/%s/%s" % (os.environ['REPO'], os.environ['BASE'], S.lang)),
        topdir_templates=S.relpath("../%s/main/%s/templates" % (os.environ['REPO'], os.environ['BASE'])),
        transform_path=(split_branch_path, join_branch_path)
    ),
]

S.mappings = [
]
